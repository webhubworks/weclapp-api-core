<?php

namespace Webhubworks\WeclappApiCore\Model;

class ApiProblem extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }

    /**
     * @var string
     */
    protected $detail;

    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     *
     * @var string
     */
    protected $error;

    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     *
     * @var string
     */
    protected $instance;

    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @var list<array<string, mixed>>
     */
    protected $messages;

    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     *
     * @var int
     */
    protected $status;

    /**
     * This will not change from occurrence to occurrence of the problem
     *
     * @var string
     */
    protected $title;

    /**
     * @var string
     */
    protected $type;

    /**
     * Only available for problems of a validation type
     *
     * @var list<ValidationError>
     */
    protected $validationErrors;

    public function getDetail(): string
    {
        return $this->detail;
    }

    public function setDetail(string $detail): self
    {
        $this->initialized['detail'] = true;
        $this->detail = $detail;

        return $this;
    }

    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     */
    public function getError(): string
    {
        return $this->error;
    }

    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     */
    public function setError(string $error): self
    {
        $this->initialized['error'] = true;
        $this->error = $error;

        return $this;
    }

    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     */
    public function getInstance(): string
    {
        return $this->instance;
    }

    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     */
    public function setInstance(string $instance): self
    {
        $this->initialized['instance'] = true;
        $this->instance = $instance;

        return $this;
    }

    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @return list<array<string, mixed>>
     */
    public function getMessages(): array
    {
        return $this->messages;
    }

    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @param  list<array<string, mixed>>  $messages
     */
    public function setMessages(array $messages): self
    {
        $this->initialized['messages'] = true;
        $this->messages = $messages;

        return $this;
    }

    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    public function setStatus(int $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * This will not change from occurrence to occurrence of the problem
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * This will not change from occurrence to occurrence of the problem
     */
    public function setTitle(string $title): self
    {
        $this->initialized['title'] = true;
        $this->title = $title;

        return $this;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * Only available for problems of a validation type
     *
     * @return list<ValidationError>
     */
    public function getValidationErrors(): array
    {
        return $this->validationErrors;
    }

    /**
     * Only available for problems of a validation type
     *
     * @param  list<ValidationError>  $validationErrors
     */
    public function setValidationErrors(array $validationErrors): self
    {
        $this->initialized['validationErrors'] = true;
        $this->validationErrors = $validationErrors;

        return $this;
    }
}
