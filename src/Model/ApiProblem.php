<?php

namespace Webhubworks\WeclappApiCore\Model;

class ApiProblem extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];
    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * 
     *
     * @var string|null
     */
    protected $detail;
    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     *
     * @var string|null
     */
    protected $error;
    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     *
     * @var string|null
     */
    protected $instance;
    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @var list<array<string, mixed>>|null
     */
    protected $messages;
    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     *
     * @var int|null
     */
    protected $status;
    /**
     * This will not change from occurrence to occurrence of the problem
     *
     * @var string|null
     */
    protected $title;
    /**
     * 
     *
     * @var string|null
     */
    protected $type;
    /**
     * Only available for problems of a validation type
     *
     * @var list<ValidationError>|null
     */
    protected $validationErrors;
    /**
     * 
     *
     * @return string|null
     */
    public function getDetail(): ?string
    {
        return $this->detail;
    }
    /**
     * 
     *
     * @param string|null $detail
     *
     * @return self
     */
    public function setDetail(?string $detail): self
    {
        $this->initialized['detail'] = true;
        $this->detail = $detail;
        return $this;
    }
    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     *
     * @return string|null
     */
    public function getError(): ?string
    {
        return $this->error;
    }
    /**
     * Unstructured legacy error message. Deprecated, will be removed in the future.
     *
     * @param string|null $error
     *
     * @return self
     */
    public function setError(?string $error): self
    {
        $this->initialized['error'] = true;
        $this->error = $error;
        return $this;
    }
    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     *
     * @return string|null
     */
    public function getInstance(): ?string
    {
        return $this->instance;
    }
    /**
     * In weclapp, this typically is the URI to the affected entity etc.
     *
     * @param string|null $instance
     *
     * @return self
     */
    public function setInstance(?string $instance): self
    {
        $this->initialized['instance'] = true;
        $this->instance = $instance;
        return $this;
    }
    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @return list<array<string, mixed>>|null
     */
    public function getMessages(): ?array
    {
        return $this->messages;
    }
    /**
     * Unstructured legacy error messages. Deprecated, will be removed in the future.
     *
     * @param list<array<string, mixed>>|null $messages
     *
     * @return self
     */
    public function setMessages(?array $messages): self
    {
        $this->initialized['messages'] = true;
        $this->messages = $messages;
        return $this;
    }
    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     *
     * @return int|null
     */
    public function getStatus(): ?int
    {
        return $this->status;
    }
    /**
     * (RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.
     *
     * @param int|null $status
     *
     * @return self
     */
    public function setStatus(?int $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;
        return $this;
    }
    /**
     * This will not change from occurrence to occurrence of the problem
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }
    /**
     * This will not change from occurrence to occurrence of the problem
     *
     * @param string|null $title
     *
     * @return self
     */
    public function setTitle(?string $title): self
    {
        $this->initialized['title'] = true;
        $this->title = $title;
        return $this;
    }
    /**
     * 
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->type;
    }
    /**
     * 
     *
     * @param string|null $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;
        return $this;
    }
    /**
     * Only available for problems of a validation type
     *
     * @return list<ValidationError>|null
     */
    public function getValidationErrors(): ?array
    {
        return $this->validationErrors;
    }
    /**
     * Only available for problems of a validation type
     *
     * @param list<ValidationError>|null $validationErrors
     *
     * @return self
     */
    public function setValidationErrors(?array $validationErrors): self
    {
        $this->initialized['validationErrors'] = true;
        $this->validationErrors = $validationErrors;
        return $this;
    }
}